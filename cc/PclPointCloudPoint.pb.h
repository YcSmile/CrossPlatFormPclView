// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PclPointCloudPoint.proto

#ifndef PROTOBUF_INCLUDED_PclPointCloudPoint_2eproto
#define PROTOBUF_INCLUDED_PclPointCloudPoint_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PclPointCloudPoint_2eproto 

namespace protobuf_PclPointCloudPoint_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_PclPointCloudPoint_2eproto
namespace LiDarPointPack {
class PointData;
class PointDataDefaultTypeInternal;
extern PointDataDefaultTypeInternal _PointData_default_instance_;
class PointDataList;
class PointDataListDefaultTypeInternal;
extern PointDataListDefaultTypeInternal _PointDataList_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace LiDarPointPack
namespace google {
namespace protobuf {
template<> ::LiDarPointPack::PointData* Arena::CreateMaybeMessage<::LiDarPointPack::PointData>(Arena*);
template<> ::LiDarPointPack::PointDataList* Arena::CreateMaybeMessage<::LiDarPointPack::PointDataList>(Arena*);
template<> ::LiDarPointPack::Vector3* Arena::CreateMaybeMessage<::LiDarPointPack::Vector3>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace LiDarPointPack {

// ===================================================================

class Vector3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LiDarPointPack.Vector3) */ {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vector3* other);
  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(NULL);
  }

  Vector3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:LiDarPointPack.Vector3)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_PclPointCloudPoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PointData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LiDarPointPack.PointData) */ {
 public:
  PointData();
  virtual ~PointData();

  PointData(const PointData& from);

  inline PointData& operator=(const PointData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointData(PointData&& from) noexcept
    : PointData() {
    *this = ::std::move(from);
  }

  inline PointData& operator=(PointData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointData* internal_default_instance() {
    return reinterpret_cast<const PointData*>(
               &_PointData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PointData* other);
  friend void swap(PointData& a, PointData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointData* New() const final {
    return CreateMaybeMessage<PointData>(NULL);
  }

  PointData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointData& from);
  void MergeFrom(const PointData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .LiDarPointPack.Vector3 coordinate = 2;
  bool has_coordinate() const;
  void clear_coordinate();
  static const int kCoordinateFieldNumber = 2;
  private:
  const ::LiDarPointPack::Vector3& _internal_coordinate() const;
  public:
  const ::LiDarPointPack::Vector3& coordinate() const;
  ::LiDarPointPack::Vector3* release_coordinate();
  ::LiDarPointPack::Vector3* mutable_coordinate();
  void set_allocated_coordinate(::LiDarPointPack::Vector3* coordinate);

  // int32 laserId = 1;
  void clear_laserid();
  static const int kLaserIdFieldNumber = 1;
  ::google::protobuf::int32 laserid() const;
  void set_laserid(::google::protobuf::int32 value);

  // float radius = 3;
  void clear_radius();
  static const int kRadiusFieldNumber = 3;
  float radius() const;
  void set_radius(float value);

  // float inclination = 4;
  void clear_inclination();
  static const int kInclinationFieldNumber = 4;
  float inclination() const;
  void set_inclination(float value);

  // float azimuth = 5;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 5;
  float azimuth() const;
  void set_azimuth(float value);

  // @@protoc_insertion_point(class_scope:LiDarPointPack.PointData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::LiDarPointPack::Vector3* coordinate_;
  ::google::protobuf::int32 laserid_;
  float radius_;
  float inclination_;
  float azimuth_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_PclPointCloudPoint_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PointDataList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LiDarPointPack.PointDataList) */ {
 public:
  PointDataList();
  virtual ~PointDataList();

  PointDataList(const PointDataList& from);

  inline PointDataList& operator=(const PointDataList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PointDataList(PointDataList&& from) noexcept
    : PointDataList() {
    *this = ::std::move(from);
  }

  inline PointDataList& operator=(PointDataList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PointDataList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PointDataList* internal_default_instance() {
    return reinterpret_cast<const PointDataList*>(
               &_PointDataList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PointDataList* other);
  friend void swap(PointDataList& a, PointDataList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PointDataList* New() const final {
    return CreateMaybeMessage<PointDataList>(NULL);
  }

  PointDataList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PointDataList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PointDataList& from);
  void MergeFrom(const PointDataList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointDataList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .LiDarPointPack.PointData points = 1;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 1;
  ::LiDarPointPack::PointData* mutable_points(int index);
  ::google::protobuf::RepeatedPtrField< ::LiDarPointPack::PointData >*
      mutable_points();
  const ::LiDarPointPack::PointData& points(int index) const;
  ::LiDarPointPack::PointData* add_points();
  const ::google::protobuf::RepeatedPtrField< ::LiDarPointPack::PointData >&
      points() const;

  // @@protoc_insertion_point(class_scope:LiDarPointPack.PointDataList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::LiDarPointPack::PointData > points_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_PclPointCloudPoint_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:LiDarPointPack.Vector3.x)
  return x_;
}
inline void Vector3::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:LiDarPointPack.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:LiDarPointPack.Vector3.y)
  return y_;
}
inline void Vector3::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:LiDarPointPack.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:LiDarPointPack.Vector3.z)
  return z_;
}
inline void Vector3::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:LiDarPointPack.Vector3.z)
}

// -------------------------------------------------------------------

// PointData

// int32 laserId = 1;
inline void PointData::clear_laserid() {
  laserid_ = 0;
}
inline ::google::protobuf::int32 PointData::laserid() const {
  // @@protoc_insertion_point(field_get:LiDarPointPack.PointData.laserId)
  return laserid_;
}
inline void PointData::set_laserid(::google::protobuf::int32 value) {
  
  laserid_ = value;
  // @@protoc_insertion_point(field_set:LiDarPointPack.PointData.laserId)
}

// .LiDarPointPack.Vector3 coordinate = 2;
inline bool PointData::has_coordinate() const {
  return this != internal_default_instance() && coordinate_ != NULL;
}
inline void PointData::clear_coordinate() {
  if (GetArenaNoVirtual() == NULL && coordinate_ != NULL) {
    delete coordinate_;
  }
  coordinate_ = NULL;
}
inline const ::LiDarPointPack::Vector3& PointData::_internal_coordinate() const {
  return *coordinate_;
}
inline const ::LiDarPointPack::Vector3& PointData::coordinate() const {
  const ::LiDarPointPack::Vector3* p = coordinate_;
  // @@protoc_insertion_point(field_get:LiDarPointPack.PointData.coordinate)
  return p != NULL ? *p : *reinterpret_cast<const ::LiDarPointPack::Vector3*>(
      &::LiDarPointPack::_Vector3_default_instance_);
}
inline ::LiDarPointPack::Vector3* PointData::release_coordinate() {
  // @@protoc_insertion_point(field_release:LiDarPointPack.PointData.coordinate)
  
  ::LiDarPointPack::Vector3* temp = coordinate_;
  coordinate_ = NULL;
  return temp;
}
inline ::LiDarPointPack::Vector3* PointData::mutable_coordinate() {
  
  if (coordinate_ == NULL) {
    auto* p = CreateMaybeMessage<::LiDarPointPack::Vector3>(GetArenaNoVirtual());
    coordinate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:LiDarPointPack.PointData.coordinate)
  return coordinate_;
}
inline void PointData::set_allocated_coordinate(::LiDarPointPack::Vector3* coordinate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete coordinate_;
  }
  if (coordinate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      coordinate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, coordinate, submessage_arena);
    }
    
  } else {
    
  }
  coordinate_ = coordinate;
  // @@protoc_insertion_point(field_set_allocated:LiDarPointPack.PointData.coordinate)
}

// float radius = 3;
inline void PointData::clear_radius() {
  radius_ = 0;
}
inline float PointData::radius() const {
  // @@protoc_insertion_point(field_get:LiDarPointPack.PointData.radius)
  return radius_;
}
inline void PointData::set_radius(float value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:LiDarPointPack.PointData.radius)
}

// float inclination = 4;
inline void PointData::clear_inclination() {
  inclination_ = 0;
}
inline float PointData::inclination() const {
  // @@protoc_insertion_point(field_get:LiDarPointPack.PointData.inclination)
  return inclination_;
}
inline void PointData::set_inclination(float value) {
  
  inclination_ = value;
  // @@protoc_insertion_point(field_set:LiDarPointPack.PointData.inclination)
}

// float azimuth = 5;
inline void PointData::clear_azimuth() {
  azimuth_ = 0;
}
inline float PointData::azimuth() const {
  // @@protoc_insertion_point(field_get:LiDarPointPack.PointData.azimuth)
  return azimuth_;
}
inline void PointData::set_azimuth(float value) {
  
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:LiDarPointPack.PointData.azimuth)
}

// -------------------------------------------------------------------

// PointDataList

// repeated .LiDarPointPack.PointData points = 1;
inline int PointDataList::points_size() const {
  return points_.size();
}
inline void PointDataList::clear_points() {
  points_.Clear();
}
inline ::LiDarPointPack::PointData* PointDataList::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:LiDarPointPack.PointDataList.points)
  return points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::LiDarPointPack::PointData >*
PointDataList::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:LiDarPointPack.PointDataList.points)
  return &points_;
}
inline const ::LiDarPointPack::PointData& PointDataList::points(int index) const {
  // @@protoc_insertion_point(field_get:LiDarPointPack.PointDataList.points)
  return points_.Get(index);
}
inline ::LiDarPointPack::PointData* PointDataList::add_points() {
  // @@protoc_insertion_point(field_add:LiDarPointPack.PointDataList.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::LiDarPointPack::PointData >&
PointDataList::points() const {
  // @@protoc_insertion_point(field_list:LiDarPointPack.PointDataList.points)
  return points_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LiDarPointPack

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PclPointCloudPoint_2eproto
