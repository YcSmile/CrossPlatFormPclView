// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PclPointCloudPoint.proto

#include "PclPointCloudPoint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_PclPointCloudPoint_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PclPointCloudPoint_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PclPointCloudPoint_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PointData;
}  // namespace protobuf_PclPointCloudPoint_2eproto
namespace LiDarPointPack {
class Vector3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector3>
      _instance;
} _Vector3_default_instance_;
class PointDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointData>
      _instance;
} _PointData_default_instance_;
class PointDataListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PointDataList>
      _instance;
} _PointDataList_default_instance_;
}  // namespace LiDarPointPack
namespace protobuf_PclPointCloudPoint_2eproto {
static void InitDefaultsVector3() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LiDarPointPack::_Vector3_default_instance_;
    new (ptr) ::LiDarPointPack::Vector3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LiDarPointPack::Vector3::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Vector3 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVector3}, {}};

static void InitDefaultsPointData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LiDarPointPack::_PointData_default_instance_;
    new (ptr) ::LiDarPointPack::PointData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LiDarPointPack::PointData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PointData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPointData}, {
      &protobuf_PclPointCloudPoint_2eproto::scc_info_Vector3.base,}};

static void InitDefaultsPointDataList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::LiDarPointPack::_PointDataList_default_instance_;
    new (ptr) ::LiDarPointPack::PointDataList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LiDarPointPack::PointDataList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PointDataList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPointDataList}, {
      &protobuf_PclPointCloudPoint_2eproto::scc_info_PointData.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Vector3.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PointData.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PointDataList.base);
}

::google::protobuf::Metadata file_level_metadata[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LiDarPointPack::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LiDarPointPack::Vector3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LiDarPointPack::Vector3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LiDarPointPack::Vector3, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LiDarPointPack::PointData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LiDarPointPack::PointData, laserid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LiDarPointPack::PointData, coordinate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LiDarPointPack::PointData, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LiDarPointPack::PointData, inclination_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LiDarPointPack::PointData, azimuth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LiDarPointPack::PointDataList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LiDarPointPack::PointDataList, points_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LiDarPointPack::Vector3)},
  { 8, -1, sizeof(::LiDarPointPack::PointData)},
  { 18, -1, sizeof(::LiDarPointPack::PointDataList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::LiDarPointPack::_Vector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LiDarPointPack::_PointData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::LiDarPointPack::_PointDataList_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "PclPointCloudPoint.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030PclPointCloudPoint.proto\022\016LiDarPointPa"
      "ck\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z"
      "\030\003 \001(\002\"\177\n\tPointData\022\017\n\007laserId\030\001 \001(\005\022+\n\n"
      "coordinate\030\002 \001(\0132\027.LiDarPointPack.Vector"
      "3\022\016\n\006radius\030\003 \001(\002\022\023\n\013inclination\030\004 \001(\002\022\017"
      "\n\007azimuth\030\005 \001(\002\":\n\rPointDataList\022)\n\006poin"
      "ts\030\001 \003(\0132\031.LiDarPointPack.PointDataB\021\252\002\016"
      "LiDarPointPackb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 302);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PclPointCloudPoint.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_PclPointCloudPoint_2eproto
namespace LiDarPointPack {

// ===================================================================

void Vector3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900 
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PclPointCloudPoint_2eproto::scc_info_Vector3.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LiDarPointPack.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:LiDarPointPack.Vector3)
}

void Vector3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:LiDarPointPack.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
}

void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  ::protobuf_PclPointCloudPoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PclPointCloudPoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3& Vector3::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PclPointCloudPoint_2eproto::scc_info_Vector3.base);
  return *internal_default_instance();
}


void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:LiDarPointPack.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure 
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LiDarPointPack.Vector3)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LiDarPointPack.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LiDarPointPack.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LiDarPointPack.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LiDarPointPack.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LiDarPointPack.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LiDarPointPack.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LiDarPointPack.Vector3)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LiDarPointPack.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LiDarPointPack.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LiDarPointPack.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LiDarPointPack.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LiDarPointPack.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LiDarPointPack.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_PclPointCloudPoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PclPointCloudPoint_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PointData::InitAsDefaultInstance() {
  ::LiDarPointPack::_PointData_default_instance_._instance.get_mutable()->coordinate_ = const_cast< ::LiDarPointPack::Vector3*>(
      ::LiDarPointPack::Vector3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900 
const int PointData::kLaserIdFieldNumber;
const int PointData::kCoordinateFieldNumber;
const int PointData::kRadiusFieldNumber;
const int PointData::kInclinationFieldNumber;
const int PointData::kAzimuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointData::PointData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PclPointCloudPoint_2eproto::scc_info_PointData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LiDarPointPack.PointData)
}
PointData::PointData(const PointData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_coordinate()) {
    coordinate_ = new ::LiDarPointPack::Vector3(*from.coordinate_);
  } else {
    coordinate_ = NULL;
  }
  ::memcpy(&laserid_, &from.laserid_,
    static_cast<size_t>(reinterpret_cast<char*>(&azimuth_) -
    reinterpret_cast<char*>(&laserid_)) + sizeof(azimuth_));
  // @@protoc_insertion_point(copy_constructor:LiDarPointPack.PointData)
}

void PointData::SharedCtor() {
  ::memset(&coordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&azimuth_) -
      reinterpret_cast<char*>(&coordinate_)) + sizeof(azimuth_));
}

PointData::~PointData() {
  // @@protoc_insertion_point(destructor:LiDarPointPack.PointData)
  SharedDtor();
}

void PointData::SharedDtor() {
  if (this != internal_default_instance()) delete coordinate_;
}

void PointData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PointData::descriptor() {
  ::protobuf_PclPointCloudPoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PclPointCloudPoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointData& PointData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PclPointCloudPoint_2eproto::scc_info_PointData.base);
  return *internal_default_instance();
}


void PointData::Clear() {
// @@protoc_insertion_point(message_clear_start:LiDarPointPack.PointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && coordinate_ != NULL) {
    delete coordinate_;
  }
  coordinate_ = NULL;
  ::memset(&laserid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&azimuth_) -
      reinterpret_cast<char*>(&laserid_)) + sizeof(azimuth_));
  _internal_metadata_.Clear();
}

bool PointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure 
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LiDarPointPack.PointData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 laserId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laserid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .LiDarPointPack.Vector3 coordinate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_coordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float inclination = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &inclination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float azimuth = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LiDarPointPack.PointData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LiDarPointPack.PointData)
  return false;
#undef DO_
}

void PointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LiDarPointPack.PointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 laserId = 1;
  if (this->laserid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->laserid(), output);
  }

  // .LiDarPointPack.Vector3 coordinate = 2;
  if (this->has_coordinate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_coordinate(), output);
  }

  // float radius = 3;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  // float inclination = 4;
  if (this->inclination() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->inclination(), output);
  }

  // float azimuth = 5;
  if (this->azimuth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->azimuth(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LiDarPointPack.PointData)
}

::google::protobuf::uint8* PointData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LiDarPointPack.PointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 laserId = 1;
  if (this->laserid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->laserid(), target);
  }

  // .LiDarPointPack.Vector3 coordinate = 2;
  if (this->has_coordinate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_coordinate(), deterministic, target);
  }

  // float radius = 3;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  // float inclination = 4;
  if (this->inclination() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->inclination(), target);
  }

  // float azimuth = 5;
  if (this->azimuth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->azimuth(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LiDarPointPack.PointData)
  return target;
}

size_t PointData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LiDarPointPack.PointData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .LiDarPointPack.Vector3 coordinate = 2;
  if (this->has_coordinate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *coordinate_);
  }

  // int32 laserId = 1;
  if (this->laserid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->laserid());
  }

  // float radius = 3;
  if (this->radius() != 0) {
    total_size += 1 + 4;
  }

  // float inclination = 4;
  if (this->inclination() != 0) {
    total_size += 1 + 4;
  }

  // float azimuth = 5;
  if (this->azimuth() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LiDarPointPack.PointData)
  GOOGLE_DCHECK_NE(&from, this);
  const PointData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LiDarPointPack.PointData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LiDarPointPack.PointData)
    MergeFrom(*source);
  }
}

void PointData::MergeFrom(const PointData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LiDarPointPack.PointData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_coordinate()) {
    mutable_coordinate()->::LiDarPointPack::Vector3::MergeFrom(from.coordinate());
  }
  if (from.laserid() != 0) {
    set_laserid(from.laserid());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.inclination() != 0) {
    set_inclination(from.inclination());
  }
  if (from.azimuth() != 0) {
    set_azimuth(from.azimuth());
  }
}

void PointData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LiDarPointPack.PointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointData::CopyFrom(const PointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LiDarPointPack.PointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointData::IsInitialized() const {
  return true;
}

void PointData::Swap(PointData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointData::InternalSwap(PointData* other) {
  using std::swap;
  swap(coordinate_, other->coordinate_);
  swap(laserid_, other->laserid_);
  swap(radius_, other->radius_);
  swap(inclination_, other->inclination_);
  swap(azimuth_, other->azimuth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PointData::GetMetadata() const {
  protobuf_PclPointCloudPoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PclPointCloudPoint_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PointDataList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900 
const int PointDataList::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointDataList::PointDataList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_PclPointCloudPoint_2eproto::scc_info_PointDataList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LiDarPointPack.PointDataList)
}
PointDataList::PointDataList(const PointDataList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LiDarPointPack.PointDataList)
}

void PointDataList::SharedCtor() {
}

PointDataList::~PointDataList() {
  // @@protoc_insertion_point(destructor:LiDarPointPack.PointDataList)
  SharedDtor();
}

void PointDataList::SharedDtor() {
}

void PointDataList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PointDataList::descriptor() {
  ::protobuf_PclPointCloudPoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PclPointCloudPoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointDataList& PointDataList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_PclPointCloudPoint_2eproto::scc_info_PointDataList.base);
  return *internal_default_instance();
}


void PointDataList::Clear() {
// @@protoc_insertion_point(message_clear_start:LiDarPointPack.PointDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear();
}

bool PointDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure 
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LiDarPointPack.PointDataList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .LiDarPointPack.PointData points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LiDarPointPack.PointDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LiDarPointPack.PointDataList)
  return false;
#undef DO_
}

void PointDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LiDarPointPack.PointDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LiDarPointPack.PointData points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->points(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LiDarPointPack.PointDataList)
}

::google::protobuf::uint8* PointDataList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LiDarPointPack.PointDataList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LiDarPointPack.PointData points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LiDarPointPack.PointDataList)
  return target;
}

size_t PointDataList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LiDarPointPack.PointDataList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .LiDarPointPack.PointData points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PointDataList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LiDarPointPack.PointDataList)
  GOOGLE_DCHECK_NE(&from, this);
  const PointDataList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointDataList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LiDarPointPack.PointDataList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LiDarPointPack.PointDataList)
    MergeFrom(*source);
  }
}

void PointDataList::MergeFrom(const PointDataList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LiDarPointPack.PointDataList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void PointDataList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LiDarPointPack.PointDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointDataList::CopyFrom(const PointDataList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LiDarPointPack.PointDataList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointDataList::IsInitialized() const {
  return true;
}

void PointDataList::Swap(PointDataList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointDataList::InternalSwap(PointDataList* other) {
  using std::swap;
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PointDataList::GetMetadata() const {
  protobuf_PclPointCloudPoint_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_PclPointCloudPoint_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace LiDarPointPack
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LiDarPointPack::Vector3* Arena::CreateMaybeMessage< ::LiDarPointPack::Vector3 >(Arena* arena) {
  return Arena::CreateInternal< ::LiDarPointPack::Vector3 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LiDarPointPack::PointData* Arena::CreateMaybeMessage< ::LiDarPointPack::PointData >(Arena* arena) {
  return Arena::CreateInternal< ::LiDarPointPack::PointData >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LiDarPointPack::PointDataList* Arena::CreateMaybeMessage< ::LiDarPointPack::PointDataList >(Arena* arena) {
  return Arena::CreateInternal< ::LiDarPointPack::PointDataList >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
